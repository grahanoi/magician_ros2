# Alternative Dockerfile for Raspberry Pi 4 (ARM64)
# Using Ubuntu base and installing ROS2 manually
FROM ubuntu:22.04

# Prevent interactive prompts during installation
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    gnupg2 \
    lsb-release \
    software-properties-common \
    python3-pip \
    python3-dev \
    python3-venv \
    git \
    udev \
    build-essential \
    cmake \
    pkg-config \
    libffi-dev \
    libssl-dev \
    wget \
    locales \
    && rm -rf /var/lib/apt/lists/*

# Set up locales
RUN locale-gen en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8

# Add ROS2 apt repository
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null

# Install ROS2 Humble base
RUN apt-get update && apt-get install -y \
    ros-humble-ros-base \
    python3-rosdep \
    python3-colcon-common-extensions \
    && rm -rf /var/lib/apt/lists/*

# Initialize rosdep
RUN rosdep init && rosdep update

# Create the workspace
RUN mkdir -p /magician_ros2_control_system_ws/src

# Set working directory
WORKDIR /magician_ros2_control_system_ws

# Create and activate virtual environment
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip in virtual environment
RUN pip install --upgrade pip setuptools wheel

# Source ROS setup on every shell
RUN echo "source /opt/ros/humble/setup.bash" >> ~/.bashrc

# Copy local repo into container
COPY . /magician_ros2_control_system_ws/src

# Install Python dependencies from requirements.txt
# Using --no-cache-dir to save space and --timeout for slow ARM builds
RUN pip install --no-cache-dir --timeout=1000 -r src/magician_ros2/requirements.txt

# Install additional ROS2 Python packages that might be needed
RUN pip install --no-cache-dir \
    rclpy \
    std-msgs \
    geometry-msgs \
    sensor-msgs \
    tf2-ros

# Install ROS dependencies
RUN apt-get update && \
    rosdep update && \
    rosdep install --from-paths src --ignore-src -r -y && \
    rm -rf /var/lib/apt/lists/*

# Build the workspace
RUN /bin/bash -c "source /opt/ros/humble/setup.bash && colcon build"

# Setup environment to use virtual environment
RUN echo "source /opt/venv/bin/activate" >> ~/.bashrc
RUN echo "source /opt/ros/humble/setup.bash" >> ~/.bashrc
RUN echo "source /magician_ros2_control_system_ws/install/setup.bash" >> ~/.bashrc

# Add udev rules for USB devices (Dobot)
RUN echo 'SUBSYSTEM=="usb", ATTRS{idVendor}=="10c4", ATTRS{idProduct}=="ea60", MODE="0666"' > /etc/udev/rules.d/99-dobot.rules

# Activate virtual environment by default
ENV PATH="/opt/venv/bin:$PATH"

CMD ["/bin/bash"]